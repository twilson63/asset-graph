{"version":3,"file":"index.modern.mjs","sources":["../src/gql.ts","../src/index.ts"],"sourcesContent":["import { path } from 'ramda'\n\n// import.meta?.env?.ARWEAVE ||\n// @ts-ignore\nconst arweaveUrl = 'https://arweave.net'\n\nfunction run(data: { query: string, variables: Record<string, any> }): Promise<any> {\n  return fetch(`${arweaveUrl}/graphql`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data)\n  }).then(res => res.ok ? res.json() : Promise.reject(res))\n    //.then(x => (console.log('result', x.data.errors), x))\n    .then(x => {\n\n      if (x.data.errors) {\n        throw new Error(JSON.stringify(x.data.errors, null, 2))\n      }\n      return x\n    })\n    .then(path(['data', 'transactions']))\n}\n\nexport async function gql(q: { query: string, variables: Record<string, any> }) {\n  let hasNextPage = true;\n  let edges: any[] = []\n  let cursor = \"\"\n\n  while (hasNextPage) {\n    const result = await run({ query: q.query, variables: { ...q.variables, cursor } })\n\n    if (result.edges && result.edges.length) {\n      // @ts-ignore\n      edges = edges.concat(result.edges)\n      cursor = result.edges[result.edges.length - 1].cursor\n    }\n    hasNextPage = result.pageInfo.hasNextPage\n  }\n\n  return edges\n}\n","import { gql } from './gql'\nimport { append, compose, prop, head, find, propEq, join, pluck, filter, reduce, sortBy, reject, map } from 'ramda'\nimport { AtomicAssetType } from './faces'\n\nexport default async function (id: string) {\n  return get(id)\n    .then(prop('groupId'))\n    // @ts-ignore\n    .then(getItemsByGroupId)\n    .then(buildGraph)\n}\n\nfunction get(id: string) {\n  return buildQuery(id)\n    .then(gql)\n    .then(compose(prop('node'), head))\n    .then(toAssetItem)\n}\n\nfunction buildQuery(id: string) {\n  return Promise.resolve({\n    query: `query ($ids: [ID!], $cursor: String) {\n      transactions(first: 1, after: $cursor, \n        ids: $ids) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id\n            tags {\n              name\n              value\n            }\n          }\n        }\n      }\n    }`,\n    variables: {\n      ids: [id]\n    }\n  })\n}\n\nfunction toAssetItem(node: any) {\n  // console.log('node: ', node)\n  const getTag = compose(prop('value'), n => find(propEq('name', n), node.tags))\n  const published = getTag('Published') ? Number(getTag('Published')) : Date.now()\n  // @ts-ignore\n  const topics = join(', ', pluck('value', filter(t => /^Topic:/.test(t.name), node.tags)))\n  return {\n    id: node.id,\n    type: getTag('Type'),\n    title: getTag('Title'),\n    description: getTag('Description'),\n    metaId: getTag('META'),\n    groupId: getTag('Group-Id'),\n    forks: getTag('Forks'),\n    published,\n    stamps: 0,\n    topics\n  }\n}\n\nfunction buildGraph(items: AtomicAssetType[]) {\n  function traverseGraph(children: Record<string, any>[], node: AtomicAssetType) {\n    if (children && children.length > 0) {\n      children.forEach((g: Record<string, any>) => {\n        if (g.id === node.forks) {\n          g.children = append({\n            id: node.id,\n            group: node.groupId,\n            node: node,\n            children: []\n          }, g.children)\n        } else {\n          g.children = traverseGraph(g.children, node)\n        }\n      })\n      return children\n    } else {\n      return []\n    }\n  }\n\n  function createEdge(graph: Record<string, any>, node: AtomicAssetType) {\n    if (node.forks === '') {\n      graph.id = node.id,\n        graph.group = node.groupId,\n        graph.node = node\n      graph.children = []\n    } else {\n      if (graph.id === node.forks) {\n        graph.children = append({\n          id: node.id,\n          group: node.groupId,\n          node: node,\n          children: []\n        }, graph.children)\n      } else {\n        graph.children = traverseGraph(graph.children, node)\n      }\n    }\n    return graph\n  }\n  // @ts-ignore\n  return compose(\n    reduce(createEdge, {}),\n    sortBy(prop('published')),\n    reject(propEq('forks', undefined))\n  )(items)\n}\n\nfunction getItemsByGroupId(groupId: string) {\n  // get assetItems not data\n  const query = `query ($groupIds: [String!]!, $cursor: String) {\n      transactions(first: 100, after: $cursor, tags: [\n        { name: \"Group-Id\", values: $groupIds }\n       ]) {\n        pageInfo {\n          hasNextPage\n        }\n        edges {\n          cursor\n          node {\n            id \n            tags {\n              name\n              value\n            }\n          }\n        }\n      }\n    }`\n\n  return gql({\n    query,\n    variables: { groupIds: [groupId] }\n  }).then(map(compose(\n    toAssetItem,\n    prop('node')\n  )))\n}"],"names":["async","gql","q","hasNextPage","edges","result","data","query","variables","cursor","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","x","errors","Error","path","length","concat","pageInfo","id","resolve","ids","compose","prop","head","toAssetItem","get","getItemsByGroupId","buildGraph","node","getTag","n","find","propEq","tags","published","Number","Date","now","topics","join","pluck","filter","t","test","name","type","title","description","metaId","groupId","forks","stamps","items","children","forEach","g","append","group","traverseGraph","reduce","graph","sortBy","undefined","groupIds","map"],"mappings":"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"}